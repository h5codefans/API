package cn.itcast.xml;

import java.io.FileOutputStream;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.junit.Test;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

//使用dom方式对xml文档进行crud
public class Demo03 {
   
	
	//读取xml文档中：<书名>javascript网页开发</书名>   节点中的值
	@Test
	public void read1() throws Exception{
		DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
		DocumentBuilder builder=factory.newDocumentBuilder();
		Document document=builder.parse("src/book.xml");
		
		NodeList list=document.getElementsByTagName("书名");
		Node node=list.item(1);
		String content=node.getTextContent();
		System.out.println(content);
	}
	
	//得到xml文档中的所有标签
	@Test
	public void read2() throws Exception{
		DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
		DocumentBuilder builder=factory.newDocumentBuilder();
		Document document=builder.parse("src/book.xml");
		
	    //得到跟节点
		Node root=document.getElementsByTagName("书架").item(0);
		
		list(root);
	}

	private void list(Node node) {
		if(node instanceof Element){
			System.out.println(node.getNodeName());
		}
		
		NodeList list=node.getChildNodes();
		for(int i=0;i<list.getLength();i++){
			Node child=list.item(i);
			list(child);
		}
		
	}
	
	//读取xml文档中标签属性的值：<书名 name="xxx">javascript网页开发</书名> 
	@Test
	public void read3() throws Exception{
		DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
		DocumentBuilder builder=factory.newDocumentBuilder();
		Document document=builder.parse("src/book.xml");
		
		Element bookname=(Element)document.getElementsByTagName("书名").item(0);
		String value=bookname.getAttribute("name");
		System.out.println(value);
	}
	
	//向xml文档中添加节点:<售价>59.00</售价>
	@Test
	public void add() throws Exception{
		DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
		DocumentBuilder builder=factory.newDocumentBuilder();
		Document document=builder.parse("src/book.xml");
		
		Element price=document.createElement("售价");
		price.setTextContent("59.00元");
		
		//把创建的节点挂到第一本书上
		Element book=(Element) document.getElementsByTagName("书").item(0);
		book.appendChild(price);
		
		//把更新后的内存写回到xml文档
		TransformerFactory tffactory=TransformerFactory.newInstance();
		Transformer tf=tffactory.newTransformer();
		tf.transform(new DOMSource(document), new StreamResult(new FileOutputStream("src/book.xml")));
	}
	
	//向xml文档中自定位置添加节点:<售价>59.00</售价>
	@Test
	public void add2() throws Exception{
		DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
		DocumentBuilder builder=factory.newDocumentBuilder();
		Document document=builder.parse("src/book.xml");
		
		//创建节点
		Element price=document.createElement("售价");
		price.setTextContent("59.00元");
		
		//得到参考节点
		Element refNode=(Element) document.getElementsByTagName("售价").item(0);
		
		
		//得到要挂崽的节点
		Element book=(Element) document.getElementsByTagName("书").item(0);
		
		//往book节点的自动位置插崽
		book.insertBefore(price, refNode);
		
		//把更新后的内存写回到xml文档
		TransformerFactory tffactory=TransformerFactory.newInstance();
		Transformer tf=tffactory.newTransformer();
		tf.transform(new DOMSource(document), new StreamResult(new FileOutputStream("src/book.xml")));
	}
	
	//向xml文档中添加属性:<售价 >59.00</售价>   添加name="price"属性
	@Test
	public void addAttr() throws Exception{
		DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
		DocumentBuilder builder=factory.newDocumentBuilder();
		Document document=builder.parse("src/book.xml");
		
		Element booknameElement=document.getElementsByTagName("书名").item(0);
		
		
		
		//把更新后的内存写回到xml文档
		TransformerFactory tffactory=TransformerFactory.newInstance();
		Transformer tf=tffactory.newTransformer();
		tf.transform(new DOMSource(document), new StreamResult(new FileOutputStream("src/book.xml")));
	}
}
